
spring.datasource.driver-class-name=org.postgresql.Driver

spring.datasource.url=jdbc:postgresql://ubcaaxgkchpzic:dc8ab8ec6abba976c3bb18b21719553a4bfd402af7d62a19be4026261bf2795c@ec2-54-197-100-79.compute-1.amazonaws.com:5432/
spring.datasource.username=
spring.datasource.password=

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation = true

SPRING_DATASOURCE_TYPE = org.apache.tomcat.jdbc.pool.DataSource

# Will turn off the hibernate auto-creation of the tables from the entity objects. Generally, Hibernate runs it if there is an Entity defined. But we will be using a native SQL query with JdbcTemplate, hence, we can turn this off as we will not be creating an Entity.*/
 spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.show-sql=true

#spring.datasource.initialization-mode=always
#spring.datasource.initialize=true
#spring.datasource.schema=classpath:/schema.sql

# spring.datasource.continue-on-error=true

spring.datasource.maxActive=10
spring.datasource.maxIdle=5
spring.datasource.minIdle=2
spring.datasource.initialSize=5
spring.datasource.removeAbandoned=true


//TRES IMPORTANT, IL NE FAUT PAS METTRE LES GUILLEMETS POUR INITTIALISER LA VARIABLE
//allowed.origins = "http://localhost:4200"
allowed.origins = http://localhost:4200

//C'est pour ne pas exposer que les REPOSOTORIES AVEC L'ANOTATION '@RepositoryRestRessource' (QUESTION DE SECURITY) !!!
spring.data.rest.detection-strategy=ANNOTATED

//ON DEFINT LES PARAMETRES 'OKTA' DE L'APPLICATION  UTILISEE PAR CE SITE 'OKTA' (spring boot back-end security
// ecommerce-Udemy) POUR PROTEGER L'ACCES A L'ENDPOINT :.../API/ORDERhISTORY)

okta.oauth2.client-id=0oaseuc0ni6oHcBQ85d6
okta.oauth2.client-secret=aTJyqLvQVbUxLHPrpbUfVW0TnFQumQ46jSOYywUi
okta.oauth2.issuer=https://dev-82352413.okta.com/oauth2/default




